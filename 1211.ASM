COUNT	DATA	20H
TEMP	DATA	21H
DPLTEMP	DATA	22H	;DPTR HIGHT
DPHTEMP	DATA	23H	;DPTR LOW
STEP	DATA	24H
TEMP0	DATA	25H
COUNT1	DATA	26H
RS BIT P2.0       ; LCD
RW BIT P2.1       ; LCD
E  BIT P2.2       ; LCD
		ORG		0000H
		LJMP	START
		
		ORG		0003H
		LJMP	INT_0

		ORG		000BH
		LJMP	TIMER0

		ORG		0013H
		LJMP	INT_1

		ORG		001BH
		LJMP	TIMER_1

		ORG		0023H
		LJMP	SERIAL_TRANS
START:
		MOV		A,#11010001B	
		MOV		TMOD,A	;TMOD=GATE1=1,C1/T1=1,M11/M10=01 HEX,GATE0=0,C0/T0=0,M01/M00=01
		SETB	IP.1	;PT0=1 Timer0 Interrupt Priority Bit
		CLR 	TCON.5	;TF0=0
		MOV		TL0,#10110000B		;B0
		MOV		TH0,#10011100B		;3C
		SETB	TCON.4          ;SET TIMER0 RUN
		SETB	IE.7            ;SET ALL INTERRUPT ENABLE
		SETB	IE.1            ;ENABLE TIMER0 INTERRUPT
		MOV		R5,#0	
		MOV     R6,#200			
		MOV		COUNT,#0
		MOV		COUNT1,#11111110B
		CALL	LCD_INIT
		CALL	LCD_SET
	LJMP	MAIN_MELODY

MAIN_MELODY:
		CALL 	LCD_KEPP
		CALL	DELAY01
		CALL	G4
		CALL	G4
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	G4b
		CALL	DELAY01
		CALL	G4b
		CALL	DELAY01
		CALL	D4
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01		
		CALL	C4		;2
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01	
		CALL	D4
		CALL	D4
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	C4		;3
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	D4
		CALL	DELAY01
		CALL	F4
		CALL	DELAY01
		CALL	D4
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	C4		;4
		CALL	DELAY01
		CALL	D4
		CALL	DELAY01
		CALL	D4
		CALL	D4
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	B4b
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b;1:39
		CALL	DELAY01 ;5
		CALL	G4
		CALL	G4
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	G4b
		CALL	DELAY01
		CALL	G4b
		CALL	DELAY01
		CALL	D4
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	A4
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	A4
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	B4b
		CALL	DELAY01
		CALL	C5
		CALL	DELAY01
		CALL	B4b
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	B3b
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	D4
		CALL	DELAY01
		CALL	F4
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b
		CALL	B3b
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	G4
		CALL	DELAY01
		CALL	B4b
		CALL	DELAY01
		CALL	C4
		CALL	DELAY01
		CALL	B3b
	LJMP	MAIN_MELODY
DELAY01:	MOV 	R0,#1
D1:			MOV 	R1,#200
D0:			MOV 	R2,#250
			DJNZ	R2,$
			DJNZ	R1,D0
			DJNZ	R0,D1
			RET		
B3b:	MOV		R7,#29
L_B3b:	MOV		P1,#00000001B
		CALL	DELAY_B3b
		MOV		P1,#00000000B
		CALL	DELAY_B3b
		DJNZ	R7,L_B3b
		RET			
C4:		MOV		R7,#33
L_C4:	MOV		P1,#00000001B
		CALL	DELAY_C4
		MOV		P1,#00000000B
		CALL	DELAY_C4
		DJNZ	R7,L_C4
		RET				
D4:     MOV		R7,#37
L_D4:	MOV		P1,#00000001B
		CALL	DELAY_D4
		MOV		P1,#00000000B
		CALL	DELAY_D4
		DJNZ	R7,L_D4
		RET			
E4:		MOV		R7,#41
L_E4:	MOV		P1,#00000001B
		CALL	DELAY_E4
		MOV		P1,#00000000B
		CALL	DELAY_E4
		DJNZ	R7,L_E4
		RET	
		
F4:		MOV		R7,#44
L_F4:	MOV		P1,#00000001B
		CALL	DELAY_F4
		MOV		P1,#00000000B
		CALL	DELAY_F4
		DJNZ	R7,L_F4
		RET	
G4b:	MOV		R7,#46
L_G4b:	MOV		P1,#00000001B
		CALL	DELAY_G4b
		MOV		P1,#00000000B
		CALL	DELAY_G4b
		DJNZ	R7,L_G4b
		RET			
G4:		MOV		R7,#49
L_G4:	MOV		P1,#00000001B
		CALL	DELAY_G4
		MOV		P1,#00000000B
		CALL	DELAY_G4
		DJNZ	R7,L_G4
		RET	
		
A4:		MOV 	R7,#55
L_A4:	MOV		P1,#00000001B
		CALL	DELAY_A4
		MOV		P1,#00000000B
		CALL	DELAY_A4
		DJNZ	R7,L_A4
		RET	
B4b:	MOV		R7,#58
L_B4b:	MOV		P1,#00000001B
		CALL	DELAY_B4b
		MOV		P1,#00000000B
		CALL	DELAY_B4b
		DJNZ	R7,L_B4b
		RET			
B4:		MOV		R7,#62
L_B4:	MOV		P1,#00000001B
		CALL	DELAY_B4
		MOV		P1,#00000000B
		CALL	DELAY_B4
		DJNZ		R7,L_B4
		RET	
		
C5:		MOV		R7,#66
L_C5:	MOV		P1,#00000001B
		CALL	DELAY_C5
		MOV		P1,#00000000B
		CALL	DELAY_C5
		DJNZ	R7,L_C5
		RET
		
D5:		MOV		R7,#77
L_D5:	MOV		P1,#00000001B
		CALL	DELAY_D5
		MOV		P1,#00000000B
		CALL	DELAY_D5
		DJNZ	R7,L_D5
		RET
		
E5:		MOV		R7,#84
L_E5:	MOV		P1,#00000001B
		CALL	DELAY_E5
		MOV		P1,#00000000B
		CALL	DELAY_E5
		DJNZ	R7,L_E5
		RET	
		
F5:		MOV		R7,#88
L_F5:	MOV		P1,#00000001B
		CALL	DELAY_F5
		MOV		P1,#00000000B
		CALL	DELAY_F5
		DJNZ	R7,L_F5
		RET	
G5b:	MOV		R7,#92
L_G5b:	MOV		P1,#00000001B
		CALL	DELAY_G5b
		MOV		P1,#00000000B
		CALL	DELAY_G5b
		DJNZ	R7,L_G5b
		RET		
G5:		MOV		R7,#98
L_G5:	MOV		P1,#00000001B
		CALL	DELAY_G5
		MOV		P1,#00000000B
		CALL	DELAY_G5
		DJNZ	R7,L_G5
		RET
		
A5:		MOV		R7,#110
L_A5:	MOV		P1,#00000001B
		CALL	DELAY_A5
		MOV		P1,#00000000B
		CALL	DELAY_A5
		DJNZ	R7,L_A5
		RET
		
B5:		MOV		R7,#124
L_B5:	MOV		P1,#00000001B
		CALL	DELAY_B5
		MOV		P1,#00000000B
		CALL	DELAY_B5
		DJNZ	R7,L_B5
		RET	
C6:		MOV		R7,#132
L_C6:	MOV		P1,#00000001B
		CALL	DELAY_C6
		MOV		P1,#00000000B
		CALL	DELAY_C6
		DJNZ	R7,L_C6
		RET

DELAY_B3b:		MOV		R1,#8
B3b_2:			MOV		R0,#134
B3b_1:			DJNZ	R0,B3b_1
				DJNZ	R1,B3b_2
				RET		
DELAY_C4:		MOV		R1,#9
C4_2:			MOV		R0,#106
C4_1:			DJNZ	R0,C4_1
				DJNZ	R1,C4_2
				RET
DELAY_D4:		MOV		R1,#10
D4_2:			MOV		R0,#85
D4_1:			DJNZ	R0,D4_1
				DJNZ	R1,D4_2
				RET
DELAY_E4:		MOV		R1,#10
E4_2:			MOV		R0,#76
E4_1:			DJNZ	R0,E4_1
				DJNZ	R1,E4_2
				RET
DELAY_F4:		MOV		R1,#4
F4_2:			MOV		R0,#179
F4_1:			DJNZ	R0,F4_1
				DJNZ	R1,F4_2
				RET
DELAY_G4b:		MOV		R1,#4
G4b_2:			MOV		R0,#169
G4b_1:			DJNZ	R0,G4b_1
				DJNZ	R1,G4b_2
				RET				
DELAY_G4:		MOV		R1,#11
G4_2:			MOV		R0,#58
G4_1:			DJNZ	R0,G4_1
				DJNZ	R1,G4_2
				RET
DELAY_A4:		MOV		R1,#4
A4_2:			MOV		R0,#142
A4_1:			DJNZ	R0,A4_1
				DJNZ	R1,A4_2
				RET
DELAY_B4b:		MOV		R1,#4
B4b_2:			MOV		R0,#134
B4b_1:			DJNZ	R0,B4b_1
				DJNZ	R1,B4b_2
				RET				
DELAY_B4:		MOV		R1,#2
B4_2:			MOV		R0,#253
B4_1:			DJNZ	R0,B4_1 	
				DJNZ	R1,B4_2
				RET
DELAY_C5:		MOV		R1,#3
C5_2:			MOV		R0,#159
C5_1:			DJNZ	R0,C5_1
				DJNZ	R1,C5_2
				RET		
DELAY_D5:		MOV		R1,#5
D5_2:			MOV		R0,#85
D5_1:			DJNZ	R0,D5_1
				DJNZ	R1,D5_2
				RET	
DELAY_E5:		MOV		R1,#5
E5_2:			MOV		R0,#76
E5_1:			DJNZ	R0,E5_1
				DJNZ	R1,E5_2
				RET		
DELAY_F5:		MOV		R1,#2
F5_2:			MOV		R0,#179
F5_1:			DJNZ	R0,F5_1
				DJNZ	R1,F5_2
				RET
DELAY_G5b:		MOV		R1,#2
G5b_2:			MOV		R0,#169
G5b_1:			DJNZ	R0,G5b_1
				DJNZ	R1,G5b_2
				RET					
DELAY_G5:		MOV		R1,#2
G5_2:			MOV		R0,#159
G5_1:			DJNZ	R0,G5_1
				DJNZ	R1,G5_2
				RET
DELAY_A5:		MOV		R1,#2
A5_2:			MOV		R0,#142
A5_1:			DJNZ	R0,A5_1
				DJNZ	R1,A5_2
				RET			
DELAY_B5:		MOV		R1,#1
B5_2:			MOV		R0,#253
B5_1:			DJNZ	R0,B5_1 	
				DJNZ	R1,B5_2
				RET
DELAY_C6:		MOV		R1,#3
C6_2:			MOV		R0,#80
C6_1:			DJNZ	R0,C6_1
				DJNZ	R1,C6_2
				RET					


LCD_INIT:        
    MOV 	 A, #38H       ; 2lines, 5x7 matrix
    CALL	 LCD_CMND    ; call lcd command
    CALL	 MSDELAY      ; give lcd some time
    MOV		 A, #0CH       ; display on cursor on
    CALL	 LCD_CMND
    CALL	 MSDELAY
    MOV 	 A, #01H       ; clear lcd ACALL LCD_CMND
    CALL	 MSDELAY
    MOV 	 A, #10        ; shift cursor right
    CALL	 LCD_CMND
    CALL	 MSDELAY
    MOV 	 A, #83H       ; cursor at line 1,position 3
    CALL	 LCD_CMND
    CALL	 MSDELAY
	RET
	
LCD_SET:
    MOV		DPTR,#PRINT
    MOV		A,COUNT
    MOVC	A,@A+DPTR    ; Move data from the memory location pointed to by DPTR to the A register
    MOV 	P2,A
	CALL	LCD_DATA
    INC		COUNT
    MOV		A, COUNT
    CJNE 	A, #10,LCD_SET	
	RET

LCD_CMND:       
    MOV P3, A         ; move 8bit data to p3 pins
    CLR P2.0          ; RS=0
    CLR P2.1          ; RW=0 
    SETB P2.2         ; E=high
    CALL MSDELAY
    CLR P2.2          ; E=low
    RET
;.................................................. LCD data subroutine .....................................................
LCD_DATA:       
    MOV P3, A         ; move 8bit data to p3
    SETB P2.0         ; RS=1
    CLR P2.1          ; RW=0 
    SETB P2.2         ; E=high
    CALL MSDELAY
    CLR P2.2          ; E=low
    RET
LCD_KEPP:
	MOV 	 A, #38H      
    CALL	 LCD_CMND    
    CALL	 MSDELAY
	MOV		 A, #0CH      
    CALL	 LCD_CMND
    CALL	 MSDELAY
MSDELAY:
		MOV R3, #50
MSD0:	MOV R4, #200
		DJNZ R4, $
		DJNZ R3, MSD0
		RET
TIMER0:						
		MOV		TEMP,A
		MOV		DPLTEMP,DPL
		MOV		DPHTEMP,DPH
		CLR		TCON.4		;M10 FOR 0  
		MOV		TL0,#10110000B		;10110000B
		MOV		TH0,#10011100B		;00111100B
		SETB	TCON.4 		;M10 FOR 1
		MOV		A,COUNT1
		MOV		P0,A
		RL		A
		MOV		COUNT1,A
ONESECOND:		
				DJNZ 	R6,$
                MOV     R6,#50	
RETURN:
		MOV		A,TEMP0
		MOV		DPL,DPLTEMP
		MOV		DPH,DPHTEMP
				RETI	
INT_0:
                RETI                    ;RETURN

INT_1:
                RETI                    ;RETURN

TIMER_1:
                RETI                    ;RETURN

SERIAL_TRANS:
                RETI                    ;RETURN
PRINT:
    DB 'M' ;0
    DB 'e' ;1
    DB 'r' ;2
    DB 'r' ;3
    DB 'y' ;4
    DB ' ' ;5 
    DB 'X' ;6
    DB 'm' ;7
    DB 'a' ;8
    DB 's' ;9



	
END








